import type { StatutEmploi } from '@prisma/client';
export declare class EmployeService {
    private employeRepository;
    constructor();
    createEmploye(data: any): Promise<{
        id: number;
        nom: string;
        email: string | null;
        estActif: boolean;
        entrepriseId: number;
        matricule: string;
        prenom: string;
        telephone: string | null;
        adresse: string | null;
        dateEmbauche: Date;
        statutEmploi: import("@prisma/client").$Enums.StatutEmploi;
        typeContrat: import("@prisma/client").$Enums.TypeContrat;
        typeSalaire: import("@prisma/client").$Enums.TypeSalaire;
        salaireBase: import("@prisma/client/runtime/library").Decimal;
        salaireHoraire: import("@prisma/client/runtime/library").Decimal | null;
        tauxJournalier: import("@prisma/client/runtime/library").Decimal | null;
        allocations: import("@prisma/client/runtime/library").Decimal;
        deductions: import("@prisma/client/runtime/library").Decimal;
        professionId: number | null;
    }>;
    getEmploye(id: number): Promise<{
        id: number;
        nom: string;
        email: string | null;
        estActif: boolean;
        entrepriseId: number;
        matricule: string;
        prenom: string;
        telephone: string | null;
        adresse: string | null;
        dateEmbauche: Date;
        statutEmploi: import("@prisma/client").$Enums.StatutEmploi;
        typeContrat: import("@prisma/client").$Enums.TypeContrat;
        typeSalaire: import("@prisma/client").$Enums.TypeSalaire;
        salaireBase: import("@prisma/client/runtime/library").Decimal;
        salaireHoraire: import("@prisma/client/runtime/library").Decimal | null;
        tauxJournalier: import("@prisma/client/runtime/library").Decimal | null;
        allocations: import("@prisma/client/runtime/library").Decimal;
        deductions: import("@prisma/client/runtime/library").Decimal;
        professionId: number | null;
    } | null>;
    getAllEmployes(user?: any): Promise<{
        id: number;
        nom: string;
        email: string | null;
        estActif: boolean;
        entrepriseId: number;
        matricule: string;
        prenom: string;
        telephone: string | null;
        adresse: string | null;
        dateEmbauche: Date;
        statutEmploi: import("@prisma/client").$Enums.StatutEmploi;
        typeContrat: import("@prisma/client").$Enums.TypeContrat;
        typeSalaire: import("@prisma/client").$Enums.TypeSalaire;
        salaireBase: import("@prisma/client/runtime/library").Decimal;
        salaireHoraire: import("@prisma/client/runtime/library").Decimal | null;
        tauxJournalier: import("@prisma/client/runtime/library").Decimal | null;
        allocations: import("@prisma/client/runtime/library").Decimal;
        deductions: import("@prisma/client/runtime/library").Decimal;
        professionId: number | null;
    }[]>;
    updateEmploye(id: number, data: any): Promise<{
        id: number;
        nom: string;
        email: string | null;
        estActif: boolean;
        entrepriseId: number;
        matricule: string;
        prenom: string;
        telephone: string | null;
        adresse: string | null;
        dateEmbauche: Date;
        statutEmploi: import("@prisma/client").$Enums.StatutEmploi;
        typeContrat: import("@prisma/client").$Enums.TypeContrat;
        typeSalaire: import("@prisma/client").$Enums.TypeSalaire;
        salaireBase: import("@prisma/client/runtime/library").Decimal;
        salaireHoraire: import("@prisma/client/runtime/library").Decimal | null;
        tauxJournalier: import("@prisma/client/runtime/library").Decimal | null;
        allocations: import("@prisma/client/runtime/library").Decimal;
        deductions: import("@prisma/client/runtime/library").Decimal;
        professionId: number | null;
    }>;
    deleteEmploye(id: number): Promise<void>;
    filterEmployes(filters: any): Promise<{
        id: number;
        nom: string;
        email: string | null;
        estActif: boolean;
        entrepriseId: number;
        matricule: string;
        prenom: string;
        telephone: string | null;
        adresse: string | null;
        dateEmbauche: Date;
        statutEmploi: import("@prisma/client").$Enums.StatutEmploi;
        typeContrat: import("@prisma/client").$Enums.TypeContrat;
        typeSalaire: import("@prisma/client").$Enums.TypeSalaire;
        salaireBase: import("@prisma/client/runtime/library").Decimal;
        salaireHoraire: import("@prisma/client/runtime/library").Decimal | null;
        tauxJournalier: import("@prisma/client/runtime/library").Decimal | null;
        allocations: import("@prisma/client/runtime/library").Decimal;
        deductions: import("@prisma/client/runtime/library").Decimal;
        professionId: number | null;
    }[]>;
    setStatus(id: number, statutEmploi: StatutEmploi): Promise<{
        id: number;
        nom: string;
        email: string | null;
        estActif: boolean;
        entrepriseId: number;
        matricule: string;
        prenom: string;
        telephone: string | null;
        adresse: string | null;
        dateEmbauche: Date;
        statutEmploi: import("@prisma/client").$Enums.StatutEmploi;
        typeContrat: import("@prisma/client").$Enums.TypeContrat;
        typeSalaire: import("@prisma/client").$Enums.TypeSalaire;
        salaireBase: import("@prisma/client/runtime/library").Decimal;
        salaireHoraire: import("@prisma/client/runtime/library").Decimal | null;
        tauxJournalier: import("@prisma/client/runtime/library").Decimal | null;
        allocations: import("@prisma/client/runtime/library").Decimal;
        deductions: import("@prisma/client/runtime/library").Decimal;
        professionId: number | null;
    }>;
}
//# sourceMappingURL=employeService.d.ts.map