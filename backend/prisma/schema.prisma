// ==========================================
// Schéma Prisma pour le Système de Gestion des Salaires Multi-Entreprises
// Base de données : MySQL
// Version : Prisma 5.x
// ==========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==========================================
// MODÈLES PRINCIPAUX
// ==========================================

model Entreprise {
   id             Int                @id @default(autoincrement())
   nom            String             @db.VarChar(100)
   description    String?            @db.Text
   adresse        String?            @db.VarChar(255)
   telephone      String?            @db.VarChar(20)
   email          String?            @db.VarChar(100)
   logo           String?            @db.VarChar(255) // Chemin vers le logo de l'entreprise
   estActive      Boolean            @default(true)
   dateCreation   DateTime           @default(now())

   // Relations
   utilisateurs   Utilisateur[]
   employes       Employe[]
   cyclesPaie     CyclePaie[]
   paiements      Paiement[]
   rapports       Rapport[]
   journauxAudit  JournalAudit[]
   tableauxDeBord TableauDeBord[]
   parametres     ParametreEntreprise[]
   licences       Licence[]
   kpis          KpiData[]
   alertes       Alerte[]
   exports       Export[]

   @@unique([nom])
   @@index([estActive])
   @@map("companies")
 }

model Utilisateur {
   id            Int               @id @default(autoincrement())
   nom           String            @db.VarChar(100)
   email         String            @unique @db.VarChar(100)
   motDePasse    String            @db.VarChar(255)
   role          RoleUtilisateur   @default(EMPLOYE)
   estActif      Boolean           @default(true)
   entrepriseId  Int?

   // Relations
   entreprise    Entreprise?       @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
   journauxAudit JournalAudit[]
   alertes       Alerte[]
   exports       Export[]

   @@index([entrepriseId])
   @@map("users")
 }

model Employe {
  id            Int               @id @default(autoincrement())
  matricule     String            @db.VarChar(50)
  prenom        String            @db.VarChar(100)
  nom           String            @db.VarChar(100)
  email         String?           @db.VarChar(100)
  telephone     String?           @db.VarChar(20)
  adresse       String?           @db.VarChar(255)
  dateEmbauche  DateTime
  statutEmploi  StatutEmploi
  typeContrat   TypeContrat
  typeSalaire   TypeSalaire       @default(MENSUEL)
  salaireBase   Decimal           @db.Decimal(15, 2)
  salaireHoraire Decimal?         @db.Decimal(15, 2) // Pour les honoraires
  tauxJournalier Decimal?         @db.Decimal(15, 2) // Pour les journaliers
  allocations   Decimal           @default(0.0) @db.Decimal(15, 2)
  deductions    Decimal           @default(0.0) @db.Decimal(15, 2)
  professionId  Int?
  estActif      Boolean           @default(true)
  entrepriseId  Int

  // Relations
  entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  profession    Profession?       @relation(fields: [professionId], references: [id])
  bulletins     Bulletin[]
  journauxAudit JournalAudit[]

  @@unique([entrepriseId, matricule])
  @@index([entrepriseId, estActif])
  @@index([statutEmploi])
  @@index([typeContrat])
  @@index([professionId])
  @@map("employees")
}

model Bulletin {
  id              Int               @id @default(autoincrement())
  numeroBulletin  String            @unique @db.VarChar(50)
  periodeDebut    DateTime
  periodeFin      DateTime
  salaireBase     Decimal           @db.Decimal(15, 2)
  allocations     Decimal           @default(0.0) @db.Decimal(15, 2)
  deductions      Decimal           @default(0.0) @db.Decimal(15, 2)
  totalAPayer     Decimal           @db.Decimal(15, 2)
  statutPaiement  StatutPaiement    @default(EN_ATTENTE)
  dateGeneration  DateTime          @default(now())
  cycleId         Int
  employeId       Int

  // Relations
  cycle           CyclePaie         @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  employe         Employe           @relation(fields: [employeId], references: [id], onDelete: NoAction)
  paiements       Paiement[]
  journauxAudit   JournalAudit[]

  @@unique([cycleId, employeId])
  @@index([statutPaiement])
  @@map("payslips")
}

model CyclePaie {
  id            Int               @id @default(autoincrement())
  nom           String            @db.VarChar(100)
  description   String?           @db.Text
  dateDebut     DateTime
  dateFin       DateTime
  statut        StatutCyclePaie   @default(OUVERT)
  frequence     FrequencePaie     @default(MENSUEL)
  entrepriseId  Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  bulletins     Bulletin[]
  journauxAudit JournalAudit[]

  @@unique([entrepriseId, nom])
  @@map("pay_cycles")
}

model Paiement {
  id            Int               @id @default(autoincrement())
  montant       Decimal           @db.Decimal(15, 2)
  datePaiement  DateTime          @default(now())
  modePaiement  ModePaiement
  statut        StatutPaiement    @default(EN_ATTENTE)
  reference     String?           @db.VarChar(100)
  bulletinId    Int
  entrepriseId  Int

  // Relations
  bulletin      Bulletin          @relation(fields: [bulletinId], references: [id], onDelete: Cascade)
  entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  journauxAudit JournalAudit[]

  @@index([statut])
  @@map("payments")
}

model Rapport {
  id            Int               @id @default(autoincrement())
  typeRapport   TypeRapport
  contenu       Json
  dateGeneration DateTime         @default(now())
  entrepriseId  Int

  // Relations
  entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model JournalAudit {
  id            Int               @id @default(autoincrement())
  action        ActionAudit
  details       Json
  dateAction    DateTime          @default(now())
  utilisateurId Int?
  entrepriseId  Int?
  employeId     Int?
  bulletinId    Int?
  paiementId    Int?
    cyclePaieId   Int?

  // Relations
  utilisateur   Utilisateur?      @relation(fields: [utilisateurId], references: [id], onDelete: SetNull)
  entreprise    Entreprise?       @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  employe       Employe?          @relation(fields: [employeId], references: [id], onDelete: SetNull)
  bulletin      Bulletin?         @relation(fields: [bulletinId], references: [id], onDelete: SetNull)
  paiement      Paiement?         @relation(fields: [paiementId], references: [id], onDelete: SetNull)
    cyclePaie     CyclePaie?        @relation(fields: [cyclePaieId], references: [id], onDelete: SetNull)

    @@index([utilisateurId])
    @@index([entrepriseId])
    @@index([employeId])
    @@index([bulletinId])
    @@index([paiementId])
    @@map("audit_logs")
}

model TableauDeBord {
   id            Int               @id @default(autoincrement())
   nom           String            @db.VarChar(100)
   configuration Json
   entrepriseId  Int
   roleRequis    RoleUtilisateur   @default(EMPLOYE)
   estActif      Boolean           @default(true)
   dateCreation  DateTime          @default(now())
   dateModification DateTime      @updatedAt

   // Relations
   entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
   widgets       Widget[]
   alertes       Alerte[]
   kpis          KpiData[]

   @@map("dashboards")
 }

 model Widget {
   id                Int               @id @default(autoincrement())
   nom               String            @db.VarChar(100)
   type              TypeWidget
   configuration     Json
   positionX         Int               @default(0)
   positionY         Int               @default(0)
   largeur           Int               @default(4)
   hauteur           Int               @default(3)
   tableauDeBordId   Int
   estVisible        Boolean           @default(true)
   ordre             Int               @default(0)
   dateCreation      DateTime          @default(now())

   // Relations
   tableauDeBord     TableauDeBord     @relation(fields: [tableauDeBordId], references: [id], onDelete: Cascade)

   @@map("widgets")
 }

 model KpiData {
   id            Int               @id @default(autoincrement())
   nom           String            @db.VarChar(100)
   valeur        Decimal           @db.Decimal(15, 2)
   valeurPrecedente Decimal        @db.Decimal(15, 2)
   unite         String            @db.VarChar(20)
   typeKpi       TypeKpi
   periode       PeriodeKpi
   dateCalcul    DateTime          @default(now())
   tableauDeBordId Int
   entrepriseId  Int

   // Relations
   tableauDeBord TableauDeBord     @relation(fields: [tableauDeBordId], references: [id], onDelete: Cascade)
   entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)

   @@index([tableauDeBordId, dateCalcul])
   @@index([entrepriseId, typeKpi])
   @@map("kpi_data")
 }

 model Alerte {
   id            Int               @id @default(autoincrement())
   titre         String            @db.VarChar(200)
   message       String            @db.Text
   type          TypeAlerte
   severite      SeveriteAlerte    @default(MOYENNE)
   estLue        Boolean           @default(false)
   dateCreation  DateTime          @default(now())
   dateLecture   DateTime?
   tableauDeBordId Int
   entrepriseId  Int
   utilisateurId Int?

   // Relations
   tableauDeBord TableauDeBord     @relation(fields: [tableauDeBordId], references: [id], onDelete: Cascade)
   entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
   utilisateur   Utilisateur?      @relation(fields: [utilisateurId], references: [id], onDelete: SetNull)

   @@index([entrepriseId, estLue])
   @@index([tableauDeBordId, dateCreation])
   @@map("alertes")
 }

 model Export {
   id            Int               @id @default(autoincrement())
   nom           String            @db.VarChar(100)
   type          TypeExport
   format        FormatExport
   statut        StatutExport      @default(EN_COURS)
   cheminFichier String?           @db.VarChar(255)
   parametres    Json
   dateCreation  DateTime          @default(now())
   dateFin       DateTime?
   utilisateurId Int
   entrepriseId  Int

   // Relations
   utilisateur   Utilisateur       @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
   entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)

   @@index([entrepriseId, dateCreation])
   @@map("exports")
 }

model ParametreEntreprise {
  id            Int               @id @default(autoincrement())
  cle           String            @db.VarChar(100)
  valeur        String            @db.VarChar(255)
  entrepriseId  Int

  // Relations
  entreprise    Entreprise        @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)

  @@unique([entrepriseId, cle])
  @@map("company_settings")
}

model ParametreGlobal {
  id            Int               @id @default(autoincrement())
  cle           String            @db.VarChar(100)
  valeur        String            @db.VarChar(255)
  description   String?           @db.Text
  categorie     String?           @db.VarChar(50)
  estModifiable Boolean           @default(true)
  dateCreation  DateTime          @default(now())
  dateModification DateTime       @updatedAt

  @@unique([cle])
  @@map("global_settings")
}

model Licence {
  id            Int               @id @default(autoincrement())
  nom           String            @db.VarChar(100)
  description   String?           @db.Text
  typeLicence   TypeLicence
  statut        StatutLicence     @default(ACTIVE)
  dateDebut     DateTime
  dateFin       DateTime?
  limiteUtilisateurs Int?         @default(-1) // -1 = illimité
  limiteEntreprises  Int?         @default(-1) // -1 = illimité
  prix          Decimal?          @db.Decimal(10, 2)
  entrepriseId  Int?

  // Relations
  entreprise    Entreprise?       @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)

  @@unique([nom])
  @@map("licenses")
}

model Profession {
  id            Int               @id @default(autoincrement())
  nom           String            @db.VarChar(100)
  description   String?           @db.Text
  categorie     String?           @db.VarChar(50) // Ex: Technique, Commercial, Administratif
  estActive     Boolean           @default(true)

  // Relations
  employes      Employe[]

  @@unique([nom])
  @@index([categorie])
  @@map("professions")
}

enum RoleUtilisateur {
  SUPER_ADMIN
  ADMIN_ENTREPRISE
  CAISSIER
  EMPLOYE
}

enum StatutEmploi {
  ACTIF
  CONGE
  LICENCIE
  RETRAITE
}

enum TypeContrat {
  CDI
  CDD
  INTERIM
  STAGE
}

enum TypeSalaire {
  MENSUEL
  HONORAIRES
  JOURNALIER
}

enum StatutPaiement {
  EN_ATTENTE
  PAYE
  ECHEC
}

enum TypeCyclePaie {
  MENSUEL
  HEBDOMADAIRE
  QUINZAINE
}

enum StatutCyclePaie {
  OUVERT
  FERME
}

enum FrequencePaie {
  MENSUEL
  HEBDOMADAIRE
  QUINZAINE
}

enum ModePaiement {
  ESPECES
  CHEQUE
  VIREMENT
  WAVE
  ORANGE_MONEY
}

enum TypeRapport {
  BULLETINS
  EMPLOYES
  PAIEMENTS
  STATISTIQUES
}

enum ActionAudit {
  CREATION
  MODIFICATION
  SUPPRESSION
  CONNEXION
  DECONNEXION
  EXPORTATION
  GENERATION
}

enum TypeLicence {
  STANDARD
  PREMIUM
  ENTERPRISE
  TRIAL
}

enum StatutLicence {
   ACTIVE
   EXPIREE
   SUSPENDUE
   ANNULEE
 }

 enum TypeWidget {
   KPI_CARD
   LINE_CHART
   BAR_CHART
   PIE_CHART
   AREA_CHART
   TABLE
   GAUGE
   METRIC
   ALERT_LIST
   EXPORT_BUTTON
 }

 enum TypeKpi {
   NOMBRE_EMPLOYES
   NOMBRE_EMPLOYES_ACTIFS
   TOTAL_SALAIRE_BASE
   TOTAL_ALLOCATIONS
   TOTAL_DEDUCTIONS
   TOTAL_A_PAYER
   NOMBRE_BULLETINS
   NOMBRE_PAIEMENTS
   NOMBRE_PAIEMENTS_PAYES
   NOMBRE_CYCLES
   TAUX_PAIEMENT
   MASSE_SALARIALE
   EVOLUTION_SALARIALE
   TAUX_ABSENTEISME
   TURNOVER
 }

 enum PeriodeKpi {
   HEURE
   JOUR
   SEMAINE
   MOIS
   TRIMESTRE
   ANNEE
   TEMPS_REEL
 }

 enum TypeAlerte {
   PAIEMENT_ECHEC
   RETARD_PAIEMENT
   SEUIL_DEPASSE
   NOUVEAU_EMPLOYE
   EMPLOYE_PARTI
   CYCLE_FERME
   LICENCE_EXPIRATION
   PERFORMANCE
   SECURITE
 }

 enum SeveriteAlerte {
   FAIBLE
   MOYENNE
   ELEVEE
   CRITIQUE
 }

 enum TypeExport {
   DONNEES_ANALYTIQUES
   RAPPORT_SALARIAL
   LISTE_EMPLOYES
   BULLETINS_PAIE
   PAIEMENTS
   KPI_DASHBOARD
 }

 enum FormatExport {
   PDF
   EXCEL
   CSV
   JSON
 }

 enum StatutExport {
   EN_COURS
   TERMINE
   ECHEC
 }
